import type { NextPage } from 'next'
import Link from "next/link";
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { Text, Container, Input, Button, Spacer, Loading, User, Card, Navbar, Checkbox }from "@nextui-org/react";
import { useState, useEffect } from 'react';

// home assistant stuff
import { getAuth, createConnection, subscribeEntities, ERR_HASS_HOST_REQUIRED, ERR_INVALID_AUTH, callService, getUser } from "home-assistant-js-websocket";

// Interfaces
import { ControlUser } from '../interfaces/ControlUser';

// Components
import NavbarCustom from '../components/NavbarCustom';
import Entity from '../components/Entity';
import NoSsr from '../components/NoSsr';

const Home: NextPage = () => {
  const [endpoint, setEndpoint] = useState("");
  const [data, setData] = useState();
  const [loading, setLoading] = useState(false);
  const [entities, setEntities] = useState([]);
  const [persons, setPersons] = useState([]);
  const [hassUrl, setHassUrl] = useState("");
  const [lights, setLights] = useState([]);
  const [connection, setConnection] = useState();
  const [user, setUser] = useState(new ControlUser());
  const [showAll, setShowAll] = useState(false);

  useEffect(() => {
    setPersons([]);
    setLights([]);

    console.log(entities);
    
    // set people
    Object.keys(entities).filter((entity) => entity.startsWith("person.")).map((entity) => {
      setPersons((persons) => [...persons, entities[entity]]);
    });

    // set lights
    Object.keys(entities).filter((entity) => { 
      const name = showAll ? "" : user.name[0].toLowerCase();
      return entity.startsWith(`light.${name}`)
    }).map((entity) => {
      setLights((lights) => [...lights, entities[entity]]);
    });

  }, [entities])

  /**
   * Send Handler
   * Function that sends the endpoint to api/hatest/{endpoint}
   */
  const sendHandler = () => {
    setLoading(true);
    fetch(`/api/hatest?endpoint=${endpoint}`)
      .then((res) => res.json())
      .then((data) => {
        console.log("Data", data)
        setData(data);
        setLoading(false);
      });
  };

  async function connect() {
    console.log("Trying to connect");
    let auth;
    try {
      // Try to pick up authentication after user logs in
      auth = await getAuth();
    } catch (err) {
      console.log("Could not auto-login");
      if (err === ERR_HASS_HOST_REQUIRED) {
        const hassUrl = prompt (
          "What host to connect to?",
          "http://homeassistant.local:8123"
        );
        setHassUrl(hassUrl);
        console.log("Hass URL", hassUrl);
        // Redirect user to log in on their instance
        auth = await getAuth({ hassUrl });
      } else if(err === ERR_INVALID_AUTH) {
        console.log("Invalid auth", auth?.accessToken, auth?.expired);
        alert(`Invalid access Token! Current token: ${auth?.accessToken} Expired: ${auth?.expired}`);
        // refresh auth token
        auth?.refreshAccessToken();
        return;
      } else {
        alert(`Unknown error: ${err}`);
        return;
      }
    }

    const connection = await createConnection({ auth });
    setConnection(connection);
    getUser(connection).then((user) => {
      setUser(user);
      console.log("User", user);
    })
    
    for (const ev of ["disconnected", "ready", "reconnect-error"]) {
      connection.addEventListener(ev, () => console.log(`Event: ${ev}`));
    }
    console.log("Connected to HA. Version:", connection.haVersion);
    subscribeEntities(connection, (ent) => setEntities(ent));
  }

  const RenderPersons = ({ people }) => {
    return people.map((person) => {
      return (
        <User
          key={person.entity_id}
          src={"http://homeassistant.local:8123" + person.attributes.entity_picture}
          name={person.attributes.friendly_name}
          subtitle={person.attributes.id}
        />
      )
    })
  }

  const RenderLights = ({ ents }) => {
    return ents.map((light) => {
      return light.state !== "unavailable" ?  (
        <Entity light={light}
         callService={callService} connection={connection} />
      ) : null;
    })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavbarCustom persons={persons} user={user} />

      <Spacer y={7} />
      <Button color={"secondary"} ghost onClick={() => connect()}>Connect to Home Assistant</Button>
      <Spacer y={0.5} />
      <Checkbox defaultSelected={showAll} onChange={() => setShowAll(!showAll)}>Show All</Checkbox>

      <Container>
       <Spacer />
        <Container style={{display: "flex", gap: "1rem"}}>

            <RenderLights ents={lights} />
            <Entity light={{state:"on", entity_id:"light.bedroom", attributes: { friendly_name:"Bedroom" }}}
              callService={callService} connection={connection} />
          <Spacer />
        </Container>
      </Container>
    </div>
  )
}

export default Home
